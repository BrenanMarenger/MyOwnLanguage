Object subclass: #QType	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Quest-Variables'!!QType methodsFor: 'type checking' stamp: 'jws 11/3/2022 10:22'!checkType: aValue	self subclassResponsibility! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!QType class	instanceVariableNames: 'default'!!QType class methodsFor: 'accessing' stamp: 'jws 11/3/2022 10:19'!default	default isNil ifTrue: [default := self new].	^default! !QType subclass: #QBoolean	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Quest-Variables'!!QBoolean methodsFor: 'type checking' stamp: 'jws 11/3/2022 10:31'!checkType: aPossibleBoolean 		aPossibleBoolean isBoolean ifFalse: [QTypeMismatch signal: 'expected a boolean']! !QType subclass: #QInteger	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Quest-Variables'!!QInteger methodsFor: 'type checking' stamp: 'jws 11/3/2022 10:34'!checkType: aPossibleInteger 		aPossibleInteger isInteger		ifFalse: [QTypeMismatch signal: 'Expected an integer']! !QType subclass: #QString	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Quest-Variables'!!QString methodsFor: 'type checking' stamp: 'jws 11/3/2022 10:36'!checkType: aPossibleString		aPossibleString isString		ifFalse: [QTypeMismatch signal: 'Expected a string']! !Object subclass: #QVariable	instanceVariableNames: 'type value'	classVariableNames: ''	poolDictionaries: ''	category: 'Quest-Variables'!!QVariable commentStamp: 'jws 11/4/2022 10:06' prior: 0!A QVariable is an object that represents the storage for a statically typed variable.It knows its type and will check for type conformace upon assignment.!!QVariable methodsFor: 'accessing' stamp: 'jws 11/2/2022 10:34'!type	^ type! !!QVariable methodsFor: 'accessing' stamp: 'jws 11/2/2022 10:33'!type: anObject	type := anObject! !!QVariable methodsFor: 'accessing' stamp: 'jws 11/2/2022 10:39'!value	^ value! !!QVariable methodsFor: 'accessing' stamp: 'jws 11/3/2022 10:47'!value: anObject	self type checkType: anObject.	value := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!QVariable class	instanceVariableNames: ''!!QVariable class methodsFor: 'instance creation' stamp: 'jws 11/10/2022 10:19'!newBoolean		^self new		type: QBoolean default;		yourself! !!QVariable class methodsFor: 'instance creation' stamp: 'jws 11/10/2022 10:17'!newInteger		^self new		type: QInteger default;		yourself! !!QVariable class methodsFor: 'instance creation' stamp: 'jws 11/3/2022 10:44'!newIntegerVariable		^self new		type: QInteger default;		yourself! !!QVariable class methodsFor: 'instance creation' stamp: 'jws 11/10/2022 10:19'!newString		^self new		type: QString default;		yourself! !TestCase subclass: #TestQType	instanceVariableNames: 'integerType stringType booleanType'	classVariableNames: ''	poolDictionaries: ''	category: 'Quest-Variables'!!TestQType methodsFor: 'running' stamp: 'jws 11/3/2022 10:25'!testCheckBooleanType	| aType |	aType := QBoolean default.	aType checkType: true.	self 		should: [aType checkType: 9]		raise: QTypeMismatch.	self 		should: [aType checkType: 'hello']		raise: QTypeMismatch.! !!TestQType methodsFor: 'running' stamp: 'jws 11/3/2022 10:33'!testCheckIntegerType	| aType |	aType := QInteger default.	aType checkType: 42.	self 		should: [aType checkType: true]		raise: QTypeMismatch.	self 		should: [aType checkType: 'hello']		raise: QTypeMismatch.! !!TestQType methodsFor: 'running' stamp: 'jws 11/3/2022 10:36'!testCheckStringType	| aType |	aType := QString default.	aType checkType: 'hello'.	self 		should: [aType checkType: true]		raise: QTypeMismatch.	self 		should: [aType checkType: 13]		raise: QTypeMismatch.! !!TestQType methodsFor: 'running' stamp: 'jws 11/3/2022 10:13'!testSingleton	| typeA typeB |	typeA := QBoolean default.	typeB := QBoolean default.	self assert: (typeA == typeB).! !!TestQType methodsFor: 'initialize-release' stamp: 'jws 10/31/2022 10:44'!setUp	super setUp.	integerType := QInteger default.	stringType := QString default.	booleanType := QBoolean default.! !!TestQType methodsFor: 'initialize-release' stamp: 'jws 10/31/2022 10:46'!tearDown	integerType := nil.	stringType := nil.	booleanType := nil.	super tearDown! !TestCase subclass: #TestQVariable	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Quest-Variables'!!TestQVariable methodsFor: 'running' stamp: 'jws 11/10/2022 10:14'!testCreateTypedVariable	| integerVar stringVar booleVar |	integerVar := QVariable newInteger.	stringVar := QVariable newString.	booleVar := QVariable newBoolean. ! !!TestQVariable methodsFor: 'running' stamp: 'jws 11/3/2022 10:41'!testValueSetting	| aVariable |	aVariable := QVariable newIntegerVariable.	self assert: (aVariable value isNil).	aVariable value: 42.	self assert: (aVariable value = 42).	self 		should: [aVariable value: 'john']		raise: QTypeMismatch! !!TestQVariable methodsFor: 'initialize-release' stamp: 'jws 10/31/2022 10:37'!setUp	super setUp.	! !!TestQVariable methodsFor: 'initialize-release' stamp: 'jws 10/31/2022 10:37'!tearDown	super tearDown! !