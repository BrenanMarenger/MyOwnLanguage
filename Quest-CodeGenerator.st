Object subclass: #CCodeGenerator	instanceVariableNames: 'stream tabCount'	classVariableNames: ''	poolDictionaries: ''	category: 'Quest-CodeGenerator'!!CCodeGenerator methodsFor: 'accessing' stamp: 'jws 11/17/2022 10:39'!stream	^ stream! !!CCodeGenerator methodsFor: 'accessing' stamp: 'jws 11/17/2022 10:39'!stream: anObject	stream := anObject.! !!CCodeGenerator methodsFor: 'accessing' stamp: 'jws 11/17/2022 10:39'!tabCount	^ tabCount! !!CCodeGenerator methodsFor: 'accessing' stamp: 'jws 11/17/2022 10:39'!tabCount: anObject	tabCount := anObject.! !!CCodeGenerator methodsFor: 'initialize-release' stamp: 'jws 11/17/2022 10:47'!initialize	super initialize.	stream := WriteStream on: (String new: 80).	! !!CCodeGenerator methodsFor: 'visiting' stamp: 'BKM 12/9/2022 15:54'!visitQInteger: aQInteger 		self stream nextPutAll: 'int'.! !!CCodeGenerator methodsFor: 'visiting' stamp: 'BKM 12/13/2022 12:28'!visitQString: aQString 		self stream nextPutAll: 'std::string'.! !!CCodeGenerator methodsFor: 'visiting' stamp: 'BKM 12/12/2022 13:24'!visitQuestArgumentList: aQuestArgumentList 		aQuestArgumentList arguments		do: [:each | each accept: self]		separatedBy: [self stream nextPutAll: ', '].! !!CCodeGenerator methodsFor: 'visiting' stamp: 'BKM 12/9/2022 17:27'!visitQuestArithmeticExpression: aQuestArithmeticExpression 		aQuestArithmeticExpression  expression1 accept: self.	self stream nextPutAll: aQuestArithmeticExpression operation.	aQuestArithmeticExpression expression2 accept: self.! !!CCodeGenerator methodsFor: 'visiting' stamp: 'BKM 12/13/2022 12:16'!visitQuestAssignmentStatement: aQuestAssignmentStatement 		aQuestAssignmentStatement id accept: self.	self stream nextPutAll: ' '.	self stream nextPutAll: '='.	self stream nextPutAll: ' '.	aQuestAssignmentStatement expression accept: self.	self stream nextPutAll: ';'.! !!CCodeGenerator methodsFor: 'visiting' stamp: 'BKM 12/14/2022 11:57'!visitQuestFunctionCall: aQuestFunctionCall 		self stream nextPutAll: '_'.	aQuestFunctionCall id accept: self.	self stream nextPutAll: '('.	aQuestFunctionCall arguments accept: self.	self stream nextPutAll: ')'.! !!CCodeGenerator methodsFor: 'visiting' stamp: 'BKM 12/14/2022 11:53'!visitQuestFunctionSpell: aQuestFunctionSpell 	aQuestFunctionSpell type accept: self.	self stream nextPutAll: ' _'.	aQuestFunctionSpell id accept: self.	aQuestFunctionSpell parameters accept: self.	self stream nextPutAll: '{'; cr; tab.	aQuestFunctionSpell type accept: self.	self stream nextPutAll: ' '.	aQuestFunctionSpell id accept: self.	self stream nextPutAll: ';'; cr.	aQuestFunctionSpell method accept: self.	self stream tab.	self stream nextPutAll: 'return '.	aQuestFunctionSpell id accept: self.	self stream nextPutAll: ';'; cr.	self stream nextPutAll: '}'; cr.			! !!CCodeGenerator methodsFor: 'visiting' stamp: 'jws 11/17/2022 10:48'!visitQuestIdentifier: aQuestIdentifier 		self stream nextPutAll: aQuestIdentifier id! !!CCodeGenerator methodsFor: 'visiting' stamp: 'BKM 12/14/2022 11:51'!visitQuestIfThenElseStatement: aQuestIfThenElseStatement 	self stream nextPutAll: 'if ('.	aQuestIfThenElseStatement expression accept: self.	self stream nextPutAll: '){'.	aQuestIfThenElseStatement trueStatements		do:[:each | self stream cr; tab; tab. each accept: self].	self stream cr; tab; nextPutAll: '} else {'.	aQuestIfThenElseStatement falseStatements		do:[:each | self stream cr; tab; tab. each accept: self].	self stream cr; tab; nextPutAll: '}'; cr.! !!CCodeGenerator methodsFor: 'visiting' stamp: 'BKM 12/13/2022 12:15'!visitQuestLootDeclaration: aQuestLootDeclaration 	aQuestLootDeclaration type accept: self.	self stream nextPutAll: ' '.	aQuestLootDeclaration name accept: self.	! !!CCodeGenerator methodsFor: 'visiting' stamp: 'BKM 12/13/2022 12:14'!visitQuestLootSection: aQuestLootSection 		aQuestLootSection loot		do: [:each | each accept: self. self stream nextPutAll: ';';cr.]! !!CCodeGenerator methodsFor: 'visiting' stamp: 'BKM 12/14/2022 11:43'!visitQuestMethodBody: aQuestMethodBody 		aQuestMethodBody lootSection accept: self.	aQuestMethodBody statements		do:[:each|self stream tab. each accept: self].	! !!CCodeGenerator methodsFor: 'visiting' stamp: 'BKM 12/9/2022 17:48'!visitQuestNumericLiteral: aQuestNumericLiteral 		self stream nextPutAll: aQuestNumericLiteral value asString! !!CCodeGenerator methodsFor: 'visiting' stamp: 'BKM 12/9/2022 15:57'!visitQuestParameterList: aQuestParameterList 		self stream nextPutAll: '('.	aQuestParameterList parameters		do:[:each|each accept: self]		separatedBy:[self stream nextPutAll: ','].	self stream nextPutAll: ')'.! !!CCodeGenerator methodsFor: 'visiting' stamp: 'BKM 12/14/2022 11:48'!visitQuestQuest: aQuestQuest 		self stream		nextPutAll: '#include <iostream>'; cr;		nextPutAll: '#include <string>'; cr;		nextPutAll: '// Program '.	aQuestQuest name accept: self.	self stream cr; cr.	aQuestQuest lootSection accept: self.	aQuestQuest spellsSection accept: self.	aQuestQuest storySection accept: self.! !!CCodeGenerator methodsFor: 'visiting' stamp: 'BKM 12/9/2022 17:01'!visitQuestRelationalExpression: aQuestRelationalExpression 		aQuestRelationalExpression expression1 accept: self.	aQuestRelationalExpression operation = #=		ifTrue: [self stream nextPutAll: #=].	self stream nextPutAll: aQuestRelationalExpression operation.	aQuestRelationalExpression expression2 accept: self.	! !!CCodeGenerator methodsFor: 'visiting' stamp: 'BKM 12/13/2022 12:22'!visitQuestScribeStatement: aQuestScribeStatement 		self stream nextPutAll: 'std::cout << '.	aQuestScribeStatement expression accept: self.	self stream nextPutAll: ';'.! !!CCodeGenerator methodsFor: 'visiting' stamp: 'jws 11/17/2022 10:49'!visitQuestSpellsSection: aQuestSpellsSection 	aQuestSpellsSection spells		do: [:each | each accept: self]! !!CCodeGenerator methodsFor: 'visiting' stamp: 'BKM 12/14/2022 11:48'!visitQuestStorySection: aQuestStorySection 		self stream nextPutAll: 'int main(int argc, char * argv[]){'; cr.	aQuestStorySection statements		do: [:each | self stream tab. each accept: self. self stream cr].	self stream nextPutAll: '}'! !!CCodeGenerator methodsFor: 'visiting' stamp: 'BKM 12/14/2022 11:34'!visitQuestStringLiteral: aQuestStringLiteral 		self stream nextPutAll: '"'.	self stream nextPutAll: aQuestStringLiteral unquotedValue.	self stream nextPutAll: '"'.		! !!CCodeGenerator methodsFor: 'visiting' stamp: 'BKM 12/13/2022 11:35'!visitQuestType: aQuestType 	aQuestType type accept: self.! !!CCodeGenerator methodsFor: '*60Deprecated-accessing' stamp: 'BKM 12/9/2022 17:18'!visitQuestVariableReference: aQuestVariableReference 		aQuestVariableReference identifier accept: self.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CCodeGenerator class	instanceVariableNames: ''!!CCodeGenerator class methodsFor: 'code generating' stamp: 'jws 11/17/2022 10:40'!generate: aString 	| generator ast |	generator := self new.	ast := QuestParser parse: aString.	ast accept: generator.	^generator stream contents.! !TestCase subclass: #CCodeGeneratorTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Quest-CodeGenerator'!!CCodeGeneratorTestCase methodsFor: 'running' stamp: 'jws 11/30/2022 16:17'!testFactorial	| code |	code := CCodeGenerator generate: self factorialQuest.	self assert: (code = self cNanoQuest).! !!CCodeGeneratorTestCase methodsFor: 'running' stamp: 'jws 11/17/2022 10:43'!testNano	| code |	code := CCodeGenerator generate: self nanoQuest.	self assert: (code = self cNanoQuest).! !!CCodeGeneratorTestCase methodsFor: 'accessing' stamp: 'jws 12/1/2022 10:03'!cFactorialQuest	^'#include <iostream>#include <string>// Program Factorial// Global Lootstd::string factMsgA;std::string factMsgB;// Spellsint _factorial(int n){	int factorial;	if(n == 0){		factorial = 1;	} else {		factorial = n * _factorial(n - 1);	}	return factorial;}int main(int argc, char * argv[]){	factMsgA = "factorial of ";	factMsgB = " is ";	std::cout << factMsgA;	std::cout << 5;	std::cout << factMsgB;	std::cout << factorial(5);}'! !!CCodeGeneratorTestCase methodsFor: 'accessing' stamp: 'jws 12/1/2022 10:03'!cNanoQuest	^'#include <iostream>#include <string>// Program Nanoint main(int argc, char * argv[]){}'! !!CCodeGeneratorTestCase methodsFor: 'accessing' stamp: 'BKM 12/13/2022 12:25'!factorialQuest	^'quest factorialsloot	factMsgA isA string	factMsgB isA string!!spells	spell factorial ~ n isAn integer ~ isAn integer		if n = 0 then			1 -> factorial		else			n * factorial ~ n - 1 ~ -> factorial		endif	!!!!story	''factorial of '' -> factMsgA	'' is '' -> factMsgB	scribe factMsgA	scribe 5	scribe factMsgB	scribe factorial ~ 5 ~!!'! !!CCodeGeneratorTestCase methodsFor: 'accessing' stamp: 'jws 11/17/2022 10:41'!nanoQuest	^'quest Nanostory !!'! !