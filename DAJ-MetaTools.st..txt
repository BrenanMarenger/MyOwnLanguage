Object subclass: #AsciiArtParser	instanceVariableNames: 'grammar semantics'	classVariableNames: ''	poolDictionaries: ''	category: 'DAJ-MetaTools'!!AsciiArtParser methodsFor: 'accessing' stamp: 'jsarkela 11/27/2017 09:27'!grammar	grammar == nil 		ifTrue: 			[grammar := OhmCompiler compileGrammarDefinition: self class serializedGrammar.			semantics := AsciiArtSemantics new.			grammar semanticAction: semantics].	^grammar! !!AsciiArtParser methodsFor: 'accessing' stamp: 'jsarkela 11/27/2017 09:30'!semantics	^semantics! !!AsciiArtParser methodsFor: 'parsing' stamp: 'jws 10/18/2022 08:50'!parse: aStringrule: aGrammarRuleName	| parseTree |	parseTree := self grammar 		matchStream: (OhmInputStream on: aString) 		startingFrom: aGrammarRuleName		failureAsException: true.	self semantics value: parseTree.	^AsciiStructure 		name: self semantics structName		fields: self semantics fields! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AsciiArtParser class	instanceVariableNames: 'grammar semantics'!!AsciiArtParser class methodsFor: 'parsing' stamp: 'jsarkela 11/27/2017 09:29'!parse: aStringrule: aGrammarRuleName	^self new parse: aString rule: aGrammarRuleName! !!AsciiArtParser class methodsFor: 'accessing' stamp: 'jsarkela 11/27/2017 07:57'!serializedGrammar	^'AsciiStructure {	structure 		= bitTensPlace bitOnesPlace (separator row)* separator blanks identifier	bitTensPlace		= blanks (digit blanks)+ eol      	bitOnesPlace		= blanks (digit blanks)+ eol	row		= baseRow extRow*      	baseRow		= blanks "|" (fieldNames blanks "|")+ blanks eol	extRow		= blanks "|" (fieldNames blanks "|")+ blanks eol   	fieldNames		= (blanks identifier)*      	blanks		= (~eol space)*	identifier		= letter alnum*      	eol 		= "\r"? "\n" -- dos		| "\r"	separator		= blanks ("+" | "-")+ blanks eol}'! !OhmSemanticAction subclass: #AsciiArtSemantics	instanceVariableNames: 'count lineStart bitPositions fields fieldStarts word currentFields structName'	classVariableNames: ''	poolDictionaries: ''	category: 'DAJ-MetaTools'!!AsciiArtSemantics methodsFor: 'semantic actions' stamp: 'jsarkela 11/27/2017 09:52'!baseRow: aProductionwith: blanks1with: bar1with: recordswith: blanksNwith: barNwith: blanks2with: eol	| fieldNames startsStream |	lineStart := aProduction interval start.	currentFields := OrderedCollection new.	fieldNames := self value: records.	fieldStarts := OrderedCollection new.	fieldStarts add: (self positionToBitOffset: bar1 interval start).	barN children		do: [:each | fieldStarts add: (self positionToBitOffset: each interval start)].	startsStream := ReadStream on: fieldStarts.	fieldNames		do: 			[:each |			| aField |			aField := AsciiField new.			aField name: each.			aField word: word.			aField start: startsStream next.			aField end: startsStream peek - 1.			currentFields add: aField].! !!AsciiArtSemantics methodsFor: 'semantic actions' stamp: 'jsarkela 11/27/2017 07:58'!bitOnesPlace: aProductionwith: blanks1with: digitswith: blanks2with: eol	lineStart := aProduction interval start.	self value: digits.! !!AsciiArtSemantics methodsFor: 'semantic actions' stamp: 'jsarkela 11/27/2017 07:12'!bitTensPlace: aProductionwith: arg1with: arg2with: arg3with: arg4	^self! !!AsciiArtSemantics methodsFor: 'semantic actions' stamp: 'jsarkela 11/27/2017 08:43'!digit: aProductionwith: aDigit	bitPositions add: (count -> (aProduction interval start - lineStart)).	count := count + 1.! !!AsciiArtSemantics methodsFor: 'semantic actions' stamp: 'jsarkela 11/27/2017 09:58'!extRow: aProductionwith: blanks0with: bar0with: fieldIdswith: blanksNwith: barNwith: blanksZwith: eol	| fieldNames |	fieldNames := ReadStream on: (self value: fieldIds).	currentFields		do:			[:each |			each name: each name, fieldNames next]! !!AsciiArtSemantics methodsFor: 'semantic actions' stamp: 'jsarkela 11/27/2017 09:42'!fieldNames: aProductionwith: blankswith: identifiers	| tokens |	tokens := self value: identifiers.	tokens isEmpty ifTrue: [tokens add: ''].	^tokens		inject: ''		into: [:accum :each | accum, each]! !!AsciiArtSemantics methodsFor: 'semantic actions' stamp: 'jsarkela 11/27/2017 07:35'!identifier: aProductionwith: arg1with: arg2	^aProduction interval contents! !!AsciiArtSemantics methodsFor: 'semantic actions' stamp: 'jsarkela 11/27/2017 09:55'!row: aProductionwith: baseRowwith: extRow	self value: baseRow.	self value: extRow.	fields addAll: currentFields.	word := word + 1.! !!AsciiArtSemantics methodsFor: 'semantic actions' stamp: 'jws 10/18/2022 08:50'!structure: aProductionwith: tensPlacewith: onesPlacewith: separatorawith: rowswith: separatorbwith: blankswith: identifier	self value: tensPlace.	self value: onesPlace.	self value: rows.	self structName: identifier interval contents.! !!AsciiArtSemantics methodsFor: 'accessing' stamp: 'jsarkela 11/27/2017 09:56'!fields	^fields! !!AsciiArtSemantics methodsFor: 'accessing' stamp: 'jws 10/18/2022 08:26'!structName	^ structName! !!AsciiArtSemantics methodsFor: 'accessing' stamp: 'jws 10/18/2022 08:26'!structName: anObject	structName := anObject! !!AsciiArtSemantics methodsFor: 'initialize-release' stamp: 'jsarkela 11/27/2017 09:54'!initialize	super initialize.	count := 0.	word := 0.	bitPositions := OrderedCollection new.	currentFields := OrderedCollection new.	fields := OrderedCollection new.! !!AsciiArtSemantics methodsFor: 'utility' stamp: 'jsarkela 11/27/2017 09:09'!positionToBitOffset: aPosition	| wordPosition assoc |	wordPosition := aPosition - lineStart + 1.	assoc := bitPositions		detect: [:each | each value = wordPosition]		ifNone: [^bitPositions last key + 1].	^assoc key! !TestCase subclass: #AsciiArtTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'DAJ-MetaTools'!!AsciiArtTestCase methodsFor: 'accessing' stamp: 'jsarkela 11/27/2017 20:27'!ipHeader	^'    0                   1                   2                   3       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   |Version|  IHL  |Type of Service|          Total Length         |   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   |         Identification        |Flags|      Fragment Offset    |   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   |  Time to Live |    Protocol   |         Header Checksum       |   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   |                       Source Address                          |   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   |                    Destination Address                        |   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   |                    Options                    |    Padding    |   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ipHeader'! !!AsciiArtTestCase methodsFor: 'accessing' stamp: 'jsarkela 11/27/2017 07:06'!tcpHeader	^'    0                   1                   2                   3    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   |          Source Port          |       Destination Port        |   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   |                        Sequence Number                        |   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   |                    Acknowledgment Number                      |   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   |  Data |           |U|A|P|R|S|F|                               |   | Offset| Reserved  |R|C|S|S|Y|I|            Window             |   |       |           |G|K|H|T|N|N|                               |   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   |           Checksum            |         Urgent Pointer        |   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   |                    Options                    |    Padding    |   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   |                             data                              |   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+tcpHeader'! !!AsciiArtTestCase methodsFor: 'running' stamp: 'jws 10/18/2022 08:17'!testDeclareIpHeader	| struct cStruct |	struct := AsciiArtParser parse: self ipHeader rule: 'structure'.	cStruct := CStructureGenerator structureFor: struct.	cStruct inspect! !!AsciiArtTestCase methodsFor: 'running' stamp: 'jws 10/18/2022 08:52'!testDeclareTcpHeader	| struct cStruct |	struct := AsciiArtParser parse: self tcpHeader rule: 'structure'.	cStruct := CStructureGenerator structureFor: struct.	cStruct inspect! !!AsciiArtTestCase methodsFor: 'running' stamp: 'jsarkela 11/27/2017 20:27'!testIpHeader	| struct |	struct := AsciiArtParser parse: self ipHeader rule: 'structure'.	struct explore! !!AsciiArtTestCase methodsFor: 'running' stamp: 'jsarkela 11/27/2017 10:02'!testTcpHeader	| struct |	struct := AsciiArtParser parse: self tcpHeader rule: 'structure'.	struct explore! !Object subclass: #AsciiField	instanceVariableNames: 'name word start end'	classVariableNames: ''	poolDictionaries: ''	category: 'DAJ-MetaTools'!!AsciiField methodsFor: 'accessing' stamp: 'jws 10/18/2022 08:45'!bitSize	^self end - self start + 1! !!AsciiField methodsFor: 'accessing' stamp: 'jsarkela 11/27/2017 08:48'!end	^ end! !!AsciiField methodsFor: 'accessing' stamp: 'jsarkela 11/27/2017 08:48'!end: anObject	end := anObject! !!AsciiField methodsFor: 'accessing' stamp: 'jsarkela 11/27/2017 09:49'!name		^name! !!AsciiField methodsFor: 'accessing' stamp: 'jsarkela 11/27/2017 08:48'!name: anObject	name := anObject! !!AsciiField methodsFor: 'accessing' stamp: 'jsarkela 11/27/2017 08:48'!start	^ start! !!AsciiField methodsFor: 'accessing' stamp: 'jsarkela 11/27/2017 08:48'!start: anObject	start := anObject! !!AsciiField methodsFor: 'accessing' stamp: 'jsarkela 11/27/2017 09:19'!word	^ word! !!AsciiField methodsFor: 'accessing' stamp: 'jsarkela 11/27/2017 09:19'!word: anObject	word := anObject! !!AsciiField methodsFor: 'initialize-release' stamp: 'jsarkela 11/27/2017 09:20'!initialize	super initialize.	name := ''.	word := 0.	start := 0.	end := 0.! !!AsciiField methodsFor: 'visiting' stamp: 'jws 10/18/2022 08:09'!accept: aVisitor	^aVisitor visitAsciiField: self! !!AsciiField methodsFor: 'printing' stamp: 'jsarkela 11/28/2017 09:05'!printOn: aStream	aStream		nextPutAll: self class name;		nextPut: $(;		nextPutAll: self name;		nextPut: $[;		nextPutAll: self word printString;		nextPut: $:;		nextPutAll: start printString;		nextPut: $:;		nextPutAll: end printString;		nextPutAll: '])'! !Object subclass: #AsciiStructure	instanceVariableNames: 'name fields'	classVariableNames: ''	poolDictionaries: ''	category: 'DAJ-MetaTools'!!AsciiStructure methodsFor: 'accessing' stamp: 'jws 10/18/2022 08:31'!fields	^ fields! !!AsciiStructure methodsFor: 'accessing' stamp: 'jws 10/18/2022 08:31'!fields: anObject	fields := anObject! !!AsciiStructure methodsFor: 'accessing' stamp: 'jws 10/18/2022 08:44'!name	^ name! !!AsciiStructure methodsFor: 'accessing' stamp: 'jws 10/18/2022 08:44'!name: anObject	name := anObject! !!AsciiStructure methodsFor: 'visiting' stamp: 'jws 10/18/2022 08:34'!accept: aVisitor		^aVisitor visitAsciiStructure: self! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AsciiStructure class	instanceVariableNames: ''!!AsciiStructure class methodsFor: 'instance creation' stamp: 'jws 10/18/2022 08:32'!name: aNamefields: aSequenceOfFields	^self new		name: aName;		fields: aSequenceOfFields! !Object subclass: #CStructureGenerator	instanceVariableNames: 'stream'	classVariableNames: ''	poolDictionaries: ''	category: 'DAJ-MetaTools'!!CStructureGenerator methodsFor: 'initialize-release' stamp: 'jws 10/18/2022 08:13'!initialize	super initialize.	stream := (String new: 80) writeStream.! !!CStructureGenerator methodsFor: 'visiting' stamp: 'jws 10/18/2022 08:22'!visitAsciiField: anAsciiField 		self stream		tab; nextPutAll: 'uint32_t'; tab;		nextPutAll: anAsciiField name;		nextPut: $:;		nextPutAll: anAsciiField bitSize asString;		nextPut: $;;		lf! !!CStructureGenerator methodsFor: 'visiting' stamp: 'jws 10/18/2022 08:50'!visitAsciiStructure: anAsciiStructure 		self stream		nextPutAll: 'struct ';		nextPutAll: anAsciiStructure name;		nextPut: ${; lf.	anAsciiStructure fields do: [:each | each accept: self].	self stream nextPutAll: '};'; lf.! !!CStructureGenerator methodsFor: 'accessing' stamp: 'jws 10/18/2022 08:12'!stream	^ stream! !!CStructureGenerator methodsFor: 'accessing' stamp: 'jws 10/18/2022 08:12'!stream: anObject	stream := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CStructureGenerator class	instanceVariableNames: ''!!CStructureGenerator class methodsFor: 'generating' stamp: 'jws 10/18/2022 08:33'!structureFor: aStructure	| generator |	generator := self new.	aStructure  accept: generator.	^generator stream contents! !Object subclass: #'Semantic_SemanticsCreator'	instanceVariableNames: 'grammar baseName'	classVariableNames: ''	poolDictionaries: ''	category: 'DAJ-MetaTools'!!Semantic_SemanticsCreator methodsFor: 'accessing' stamp: 'jws 11/2/2017 09:17'!baseName	^ baseName! !!Semantic_SemanticsCreator methodsFor: 'accessing' stamp: 'jws 11/2/2017 09:17'!baseName: anObject	baseName := anObject! !!Semantic_SemanticsCreator methodsFor: 'accessing' stamp: 'jws 11/2/2017 09:17'!grammar	^ grammar! !!Semantic_SemanticsCreator methodsFor: 'accessing' stamp: 'jws 11/2/2017 09:17'!grammar: anObject	grammar := anObject! !!Semantic_SemanticsCreator methodsFor: 'meta' stamp: 'jws 11/2/2017 22:18'!compileActionForRule: aRulein: aClass	| srcStream |	srcStream := WriteStream on: String new.	srcStream 		nextPutAll: aRule ruleName;		nextPutAll: ': aProduction'; cr.	1 to: aRule arity		do: 			[:index |			srcStream				nextPutAll: 'with: arg';				nextPutAll: index printString; cr].	srcStream		cr; tab;		nextPutAll: 'self halt'.	aClass		compile: srcStream contents		classified: 'semantic actions'! !!Semantic_SemanticsCreator methodsFor: 'meta' stamp: 'jsarkela 11/21/2017 13:49'!makeSemanticsClass	| semanticsClass |	semanticsClass := OhmSemanticAction		subclass: (self baseName, 'Semantics') asSymbol		instanceVariableNames: ''		classVariableNames: ''		poolDictionaries: ''		category: 'Modtalk-Ohm-compiler'.	self grammar ruleDeclarations		do:			[:each | self compileActionForRule: each in: semanticsClass]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Semantic_SemanticsCreator class	instanceVariableNames: ''!!Semantic_SemanticsCreator class methodsFor: 'instance creation' stamp: 'jws 11/2/2017 09:17'!baseName: aStringgrammar: aGrammar	^self new		baseName: aString;		grammar: aGrammar;		yourself! !